import { Source } from '../domain/source.js';
import { v4 as uuidv4 } from 'uuid';

export class SourceService {
    constructor(sourceRepository) {
        this.sourceRepository = sourceRepository; // Inject repository via Port
    }

    // Use Case: Get all configured sources
    async getAllSources() {
        console.log("Fetching all sources from repository...");
        const sources = await this.sourceRepository.findAll();
        console.log(`Found ${sources.length} sources.`);
        // Optional: Sort sources by name
        sources.sort((a, b) => a.name.localeCompare(b.name));
        return sources;
    }

    // Use Case: Add a new news source
    async addSource(name, url) {
        if (!name || !url) {
            throw new Error("Missing required fields: name, url");
        }
        console.log(`Attempting to add source: ${name} (${url})`);

        // Check if source with this URL already exists
        const existing = await this.sourceRepository.findByUrl(url);
        if (existing) {
            console.warn(`Source with URL ${url} already exists (ID: ${existing.id}, Name: ${existing.name}).`);
            // Return existing source instead of creating a duplicate
            return existing;
            // Or throw a conflict error:
            // const err = new Error(`Source with URL ${url} already exists.`);
            // err.status = 409; // Conflict
            // throw err;
        }

        // Create and save the new source (ID generated by domain or repo)
        try {
            const newSource = new Source(null, name, url); // Let constructor/repo handle ID
            const savedSource = await this.sourceRepository.save(newSource);
            console.log(`Source added successfully: ${savedSource.id} - ${savedSource.name}`);
            return savedSource;
        } catch (error) {
             console.error(`Error creating or saving source (${name}, ${url}):`, error);
             // Re-throw validation errors from domain or repo errors
             throw error;
        }
    }

    // Optional: Add use cases for updating or deleting sources later
}
